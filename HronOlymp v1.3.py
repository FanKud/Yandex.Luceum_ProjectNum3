import asyncio
import logging
import sys
import random
from os import getenv
import os
import aiocron
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time

from aiogram.client import bot

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold

import olymp_parser


data = None
favor_data = {}
# user_id = None

# load_dotenv()
TOKEN = open('config.txt').readline().strip()  # '6521893421:AAFt5ma8WeLdqr_XOwNQ9mIegYaldtMqXZM'
dp = Dispatcher()


HELP_STR = '''–î–∞–Ω–Ω—ã–π –±–æ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —à–∫–æ–ª—å–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–∏–¥–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥, –∏ —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Å–∫–æ—Ä–æ–º –Ω–∞—á–∞–ª–µ –æ–ª–∏–º–ø–∏–∞–¥—ã.
/help-—Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥
/start-–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'''


# –¥–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@dp.callback_query(F.data.startswith("7_https://"))
async def olymp_like(callback: types.CallbackQuery):
    global data, favor_data
    user_id = callback.from_user.id
    info = callback.data.split('_')[1]
    for line in data:
        if line['link'] == info:
            break
    for line1 in favor_data[user_id]:
        if line1[0] == info:
            favor_data[user_id].remove(line1)
            break
    rep = ''
    rep += line['title'] + '\n\n'
    rep += '–û–ª–∏–º–ø–∏–∞–¥–∞ –£–î–ê–õ–ï–ù–ê –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.'
    podr = InlineKeyboardBuilder()
    podr.row(types.InlineKeyboardButton(text='‚Ü™ –ù–ê–ó–ê–î', callback_data='start3'))
    await callback.message.answer(rep, reply_markup=podr.as_markup())


# –¥–∏–∞–ª–æ–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
@dp.callback_query(F.data.startswith("5_https://"))
async def olymp_like(callback: types.CallbackQuery):
    global data, favor_data
    user_id = callback.from_user.id
    info = callback.data.split('_')[1]
    for line in data:
        if line['link'] == info:
            break
    for line1 in favor_data[user_id]:
        if line1[0] == info:
            line1[1] = 0
            break
    rep = ''
    rep += line['title'] + '\n\n'
    rep += '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –¥–∞–Ω–Ω–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã —Ç–µ–ø–µ—Ä—å –û–¢–ö–õ–Æ–ß–ï–ù–´.'
    podr = InlineKeyboardBuilder()
    podr.row(types.InlineKeyboardButton(text='‚Ü™ –ù–ê–ó–ê–î', callback_data='2_' + info))
    await callback.message.answer(rep, reply_markup=podr.as_markup())
    
    
# –¥–∏–∞–ª–æ–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
@dp.callback_query(F.data.startswith("6_https://"))
async def olymp_like(callback: types.CallbackQuery):
    global data, favor_data
    user_id = callback.from_user.id
    info = callback.data.split('_')[1]
    for line in data:
        if line['link'] == info:
            break
    for line1 in favor_data[user_id]:
        if line1[0] == info:
            line1[1] = 1
            break
    rep = ''
    rep += line['title'] + '\n\n'
    rep += '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –¥–∞–Ω–Ω–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã —Ç–µ–ø–µ—Ä—å –í–ö–õ–Æ–ß–ï–ù–´.'
    podr = InlineKeyboardBuilder()
    podr.row(types.InlineKeyboardButton(text='‚Ü™ –ù–ê–ó–ê–î', callback_data='2_' + info))
    await callback.message.answer(rep, reply_markup=podr.as_markup())


# –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
@dp.callback_query(F.data.startswith("4_https://"))
async def olymp_like(callback: types.CallbackQuery):
    global data, favor_data
    user_id = callback.from_user.id
    info = callback.data.split('_')[1]
    for line in data:
        if line['link'] == info:
            break
    for line1 in favor_data[user_id]:
        if line1[0] == info:
            break
    rep = ''
    podr = InlineKeyboardBuilder()
    if line1[1] == 1:
        rep += line['title'] + '\n\n'
        rep += '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –æ–ª–∏–º–ø–∏–∞–¥—ã –í–ö–õ–Æ–ß–ï–ù–´'
        podr.row(types.InlineKeyboardButton(text='–û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', callback_data='5_' + info))
    else:
        rep += line['title'] + '\n\n'
        rep += '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –æ–ª–∏–º–ø–∏–∞–¥—ã –û–¢–ö–õ–Æ–ß–ï–ù–´'
        podr.row(types.InlineKeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', callback_data='6_' + info))        
    podr.row(types.InlineKeyboardButton(text='‚Ü™ –ù–ê–ó–ê–î', callback_data='2_' + info))
    await callback.message.answer(rep, reply_markup=podr.as_markup())


# –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
@dp.callback_query(F.data.startswith("3_https://"))
async def olymp_like(callback: types.CallbackQuery):
    global data, favor_data
    user_id = callback.from_user.id
    info = callback.data.split('_')[1]
    for line in data:
        if line['link'] == info:
            break
    rep = '–û–ª–∏–º–ø–∏–∞–¥–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\n\n'
    rep += line['title'] + '\n\n' + '–ü—Ä–µ–¥–º–µ—Ç: ' + line['subject'] + '\n' + '–ö–ª–∞—Å—Å: ' + line['form'] + '\n' + '–†–µ–π—Ç–∏–Ω–≥: ' + line['raiting'] + '\n' + '–î–∞—Ç–∞: ' + line['time'] + '\n\n' + '–ü–æ–¥—Ä–æ–±–Ω–µ–µ: ' + line['link']
    podr = InlineKeyboardBuilder()
    podr.row(types.InlineKeyboardButton(text='‚Ü™ –ù–ê–ó–ê–î', callback_data='2_' + info))
    await callback.message.answer(rep, reply_markup=podr.as_markup())


# –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
@dp.callback_query(F.data.startswith("2_https://"))
async def olymp_like(callback: types.CallbackQuery):
    global data, favor_data
    user_id = callback.from_user.id
    info = callback.data.split('_')[1]
    for line in data:
        if line['link'] == info:
            title = line['title']
            break
    podr = InlineKeyboardBuilder()
    podr.row(types.InlineKeyboardButton(text='üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', callback_data='3_' + info))
    podr.row(types.InlineKeyboardButton(text='‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data='4_' + info))
    podr.row(types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É', callback_data='7_' + info))
    podr.row(types.InlineKeyboardButton(text='‚Ü™ –ù–ê–ó–ê–î', callback_data='start3'))

    await callback.message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n' + title, reply_markup=podr.as_markup())


# –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@dp.callback_query(F.data.startswith("1_https://"))
async def olymp_like(callback: types.CallbackQuery):
    global data, favor_data
    user_id = callback.from_user.id
    info = callback.data.split('_')[1]
    for line in data:
        if line['link'] == info:
            if user_id in favor_data:
                favor_data[user_id].append([info, 1])
            else:
                favor_data[user_id] = [[info, 1]]
            break
    print(favor_data)
    await callback.message.answer('–û–ª–∏–º–ø–∏–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\n\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09.00 —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö –¥–ª—è —ç—Ç–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∑–∞–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å" –∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ª–∏–º–ø–∏–∞–¥—É.', reply_markup=builder1.as_markup())


# –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ
@dp.callback_query(F.data.startswith("https://"))
async def olymp_about(callback: types.CallbackQuery):
    global data
    user_id = callback.from_user.id
    info = callback.data
    for line in data:
        if line['link'] == info:
            break
    rep = line['title'] + '\n\n' + '–ü—Ä–µ–¥–º–µ—Ç: ' + line['subject'] + '\n' + '–ö–ª–∞—Å—Å: ' + line['form'] + '\n' + '–†–µ–π—Ç–∏–Ω–≥: ' + line['raiting'] + '\n' + '–î–∞—Ç–∞: ' + line['time'] + '\n\n' + '–ü–æ–¥—Ä–æ–±–Ω–µ–µ: ' + line['link'] 
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text='‚úÖ –ë—É–¥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å',
        callback_data='1_' + line['link']), types.InlineKeyboardButton(
        text='‚Ü™ –ù–ê–ó–ê–î',
        callback_data='start2')
    )
    await callback.message.answer(rep, reply_markup=builder.as_markup())

num = 0

# –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥"
@dp.callback_query(F.data == "start2")
async def filter(callback: types.CallbackQuery):
    '''
    await callback.message.answer(''üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å'',
                                  reply_markup=kclass.as_markup())
    await callback.message.answer(''üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç'',
                                  reply_markup=subject.as_markup())
    '''
    global data, num
    if not data:
        data = olymp_parser.get_data()
    builder = InlineKeyboardBuilder()
    for line in data[num:num + 10]:
        builder.row(types.InlineKeyboardButton(
        text=line['title'],
        callback_data=line['link'])
    )
    builder.row(types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start001'),
                types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–µ 10', callback_data='next'))
    await callback.message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥:',
                         reply_markup=builder.as_markup())


# –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
@dp.callback_query(F.data == "next")
async def filter(callback: types.CallbackQuery):
    '''
    await callback.message.answer(''üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å'',
                                  reply_markup=kclass.as_markup())
    await callback.message.answer(''üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç'',
                                  reply_markup=subject.as_markup())
    '''
    global data, num
    if num < len(data) - 1:
        num += 10
    builder = InlineKeyboardBuilder()
    for line in data[num:num + 10]:
        builder.row(types.InlineKeyboardButton(
        text=line['title'],
        callback_data=line['link'])
    )
    if num < len(data) - 1:
        builder.row(types.InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∏–µ 10', callback_data='prev'),
                    types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start001'),
                    types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–µ 10', callback_data='next'))
    else:
        builder.row(types.InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∏–µ 10', callback_data='prev'),
                    types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start001'))
    await callback.message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥:',
                         reply_markup=builder.as_markup())


# –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ 10"
@dp.callback_query(F.data == "prev")
async def filter(callback: types.CallbackQuery):
    '''
    await callback.message.answer(''üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å'',
                                  reply_markup=kclass.as_markup())
    await callback.message.answer(''üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç'',
                                  reply_markup=subject.as_markup())
    '''
    global data, num
    if num > 0:
        num -= 10
    builder = InlineKeyboardBuilder()
    for line in data[num:num + 10]:
        builder.row(types.InlineKeyboardButton(
        text=line['title'],
        callback_data=line['link'])
    )
    if num > 0:
        builder.row(types.InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∏–µ 10', callback_data='prev'),
                    types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start001'),
                    types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–µ 10', callback_data='next'))
    else:
        builder.row(types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start001'),
                    types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–µ 10', callback_data='next'))
    await callback.message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥:',
                         reply_markup=builder.as_markup())    


# –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –æ–ª–∏–º–ø–∏–∞–¥ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"
@dp.callback_query(F.data == "start22")
async def filter(callback: types.CallbackQuery):
    subject = InlineKeyboardBuilder()
    subject.row(types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data="start221_1"),
                (types.InlineKeyboardButton(text='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', callback_data="start221_2")))
    subject.row(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data="start221_3"),
                (types.InlineKeyboardButton(text='–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', callback_data="start221_4")))
    subject.row(types.InlineKeyboardButton(text="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", callback_data="start221_5"),
                (types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è', callback_data="start221_6")))
    subject.row(types.InlineKeyboardButton(text="–ë–∏–æ–ª–æ–≥–∏—è", callback_data="start221_7"),
                (types.InlineKeyboardButton(text='–•–∏–º–∏—è', callback_data="start221_8")))
    subject.row(types.InlineKeyboardButton(text="–§–∏–∑–∏–∫–∞", callback_data="start221_9"),
                (types.InlineKeyboardButton(text='–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', callback_data="start221_10")))
    subject.row(types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start001'))
    await callback.message.answer('''üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç''', reply_markup=subject.as_markup())


# –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —Ç.–ø."
@dp.callback_query(F.data.startswith("start221_"))
async def filter(callback: types.CallbackQuery):
    global data
    if not data:
        data = olymp_parser.get_data()
    sub = callback.data.split('_')[1]
    if sub == '1': sub = '—Ä—É—Å—Å–∫–∏–π¬†—è–∑—ã–∫'
    elif sub == '2': sub = '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
    elif sub == '3': sub = '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'
    elif sub == '4': sub = '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π¬†—è–∑—ã–∫'
    elif sub == '5': sub = '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'
    elif sub == '6': sub = '–∏—Å—Ç–æ—Ä–∏—è'
    elif sub == '7': sub = '–±–∏–æ–ª–æ–≥–∏—è'
    elif sub == '8': sub = '—Ö–∏–º–∏—è'
    elif sub == '9': sub = '—Ñ–∏–∑–∏–∫–∞'
    elif sub == '10': sub = '–ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞'
    filter_data = []
    for line in data:
        if line['subject'].strip().lower() == sub:
            filter_data.append(line)
    builder = InlineKeyboardBuilder()
    for line in filter_data[:10]:
        builder.row(types.InlineKeyboardButton(text=line['title'], callback_data=line['link']))
    builder.row(types.InlineKeyboardButton(text='‚Ü™ –ù–ê–ó–ê–î', callback_data='start22'),
                types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start001'))
    await callback.message.answer('–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ª–∏–º–ø–∏–∞–¥ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ' + sub + ':',
                         reply_markup=builder.as_markup())


# –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
@dp.callback_query(F.data == "start3")
async def favorite(callback: types.CallbackQuery):
    global favor_data, data
    user_id = callback.from_user.id
    builder = InlineKeyboardBuilder()
    if user_id in favor_data:
        text = '–í–æ—Ç –æ–ª–∏–º–ø–∏–∞–¥—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —É—á–∞—Å—Ç–∏–µ:'
        for line in favor_data[user_id]:
            for olymp in data:
                if olymp['link'] == line[0]:
                    builder.row(types.InlineKeyboardButton(text=olymp['title'], callback_data='2_' + line[0]))
                    break
    else:
        text = '–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ'
    builder.row(types.InlineKeyboardButton(text='‚Ü™ –ù–ê–ó–ê–î', callback_data='start001'))
    await callback.message.answer(text, reply_markup=builder.as_markup())


# –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
@dp.callback_query(F.data == "start4")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer(HELP_STR, reply_markup=back1.as_markup())


@dp.callback_query(F.data == "start001")
async def start01(callback: types.CallbackQuery):
    await callback.message.answer("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:",
                                  reply_markup=builder1.as_markup())


back1 = InlineKeyboardBuilder()
back1.row(types.InlineKeyboardButton(text='‚Ü™ –ù–ê–ó–ê–î', callback_data='start001'))

kclass = InlineKeyboardBuilder()
kclass.row(types.InlineKeyboardButton(text='1Ô∏è‚É£', callback_data='start21'),(types.InlineKeyboardButton(text='2Ô∏è‚É£', callback_data='start21')),(types.InlineKeyboardButton(text='3Ô∏è‚É£', callback_data='start21')))
kclass.row(types.InlineKeyboardButton(text='4Ô∏è‚É£', callback_data='start21'),(types.InlineKeyboardButton(text='5Ô∏è‚É£', callback_data='start21')),(types.InlineKeyboardButton(text='6Ô∏è‚É£', callback_data='start21')))
kclass.row(types.InlineKeyboardButton(text='7Ô∏è‚É£', callback_data='start21'),(types.InlineKeyboardButton(text='8Ô∏è‚É£', callback_data='start21')),(types.InlineKeyboardButton(text='9Ô∏è‚É£', callback_data='start21')))
kclass.row(types.InlineKeyboardButton(text='1Ô∏è‚É£0Ô∏è‚É£', callback_data='start21'),(types.InlineKeyboardButton(text='1Ô∏è‚É£1Ô∏è‚É£', callback_data='start21')))


builder1 = InlineKeyboardBuilder()
builder1.row(types.InlineKeyboardButton(text="üîé –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É –æ–ª–∏–º–ø–∏–∞–¥—ã", callback_data="start2"))
builder1.row(types.InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É", callback_data="start22"))
builder1.row(types.InlineKeyboardButton(text='‚ù§ –ú–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data="start3"))
builder1.row(types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å / –ö–æ–º–∞–Ω–¥—ã', callback_data="start4"))


# –¥–∏–∞–ª–æ–≥ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@dp.message(Command('help'))
async def command_start(message: Message):
    await message.answer(HELP_STR,
                          reply_markup=back1.as_markup())

# –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
@dp.message(Command('start'))
async def command_start(message: Message):
    # await message.answer_sticker('CAACAgIAAxkBAAECRVxlbOeBuYcU7hzZnw7VXQAB-Svyx3sAAmcBAAIWQmsKc4m-zqWWaCIzBA')
    user_id = message.from_user.id
    await message.answer(f"üî¥ {hbold(message.from_user.first_name)}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ë–æ—Ç!\n\n" + HELP_STR,
                         reply_markup=builder1.as_markup())


# –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
@dp.message()
async def command_understand(message: Message):
    await message.reply(f'''–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, 
–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π --> /help''')
    

# —Ä–∞—Å—Å—ã–ª–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π    
async def send_message_cron(bot: Bot):
    if favor_data:
        for d in favor_data:
            user_id = d
            olymp = favor_data[user_id]
            res = ''
            for line in olymp:
                if line[1] == 1:
                    for line1 in data:
                        if line1['link'] == line[0]:
                            title = line1['title']
                            time = line1['time']
                            break
                res += 'üî¥ ' + title + '\n' + time + '\n\n'
            # print(data, favor_data[data])
            await bot.send_message(user_id, '''–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:\n\n''' + res)


# —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –∑–∞–ø—É—Å–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
async def main():
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_message_cron, trigger='cron', hour=9, minute=0, start_date=datetime.now(), kwargs={'bot': bot})
    scheduler.start()    
    await dp.start_polling(bot)
    

# —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞    
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
    aiocron.asyncio.get_event_loop().run_forever()
